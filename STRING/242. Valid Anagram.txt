BRUTE FORCE:

1. Sorting

Time Complexity: O (n (log n))
Space Complexity: Nothing really, but:

some sorting algorithms do take up space so be mindful of that.
it can be langauge dependent

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s.size()!=t.size()) return false;
        
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        
        return s==t;            
    }
};

BETTER:

2. Hashmap Approach

Using 2 hashmaps:

Time Complexity: O (n)
Space Complexity: O(alphabet size)

class Solution {
public:
    bool isAnagram(string s, string t) {
        int n = s.size(), m = t.size();
        if(n != m)
            return false;
        unordered_map<char,int>mp1, mp2;
        for(int i = 0; i < s.size(); i++)
        {
            mp1[s[i]]++;
            mp2[t[i]]++;
        }
        for(int i = 0; i < n; i++)
            if(mp1[s[i]] != mp2[s[i]])
                return false;
        return true;   
    }
};

EFFICIENT:

3. Using 1 hashmap:

Time Complexity: O (n)
Space Complexity: O(alphabet size)

class Solution {
public:
    bool isAnagram(string s, string t) {
        if (s==t) return true;
        if (s.size()!=t.size()) return false;
        unordered_map <char, int> umap;
        for (int i=0; i<s.size(); i++) {
            umap[s[i]]++;
            umap[t[i]]--;
        }
        for (auto it: umap) {
            if (it.second!=0) return false;
        }
        return true;
    }
};